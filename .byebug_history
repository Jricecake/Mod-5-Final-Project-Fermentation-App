continue
project_params[:completion_date]
project_params
exit
project_params
params
Time.now.to_i
Time.now
Time.now.getutc
project.created_at
project
Time.at(params[:completion_date] / 1000)
params[:completion_date]
params["completion_date]
params
project_params
params
project_params
exit
project_params
exit
project_params
exit
quit
project_params
exit
project.update(completion_date: Time.new)
project_params
project_params[:completion_date] = Time.new
project_params
project.update(project_params, completion_date: Time.new)
Time.new
Date.new
Date.now
project
project_params[:completed] == false
project_params[:completed] == true
project_params[:completed]
project_params.include
project_params.includes
project_params
continue
q
e
exit
continue
exit
continue
ProjectSerializer.new(@projects.first)
ProjectSerializer.new(@projects)
@projects
continue
proj.ingredients
proj = ProjectSerializer.new(Project.last)
ProjectSerializer.new(Project.last).ingredients
ProjectSerializer.new(Project.last)
ProjectSerializer.new(Project.last), serializer: ProjectSerializer
ProjectSerializer.new(Project.last)
ProjectSerializer.new
render JSON @projects
render JSON
render json
@projects
exit
user_login_params
user_params
params
continue
exit
user_params
user.errors
params
user.errors
user = User.create(user_params)
user_params
params
continue
user_params
exit
user_params
exit
user_params
params[:password]
params
user_params
user.errors
user = User.create(user_params)
continue
exit
user.errors
user = User.create(user_params)
user
params[:username]
params[:name]
params
continue
params
continue
exit
continue
params[:vessels]
params
exit
params
exit
params
exit
params
exit
params
exit
params[:vessel]
params[:vessels]
params[:ingredients]
params[:project]
params
